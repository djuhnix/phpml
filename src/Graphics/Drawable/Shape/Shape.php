<?php


namespace PHPML\Graphics\Drawable\Shape;

use FFI\CData;
use PHPML\Component\Vector;
use PHPML\Enum\Color;
use PHPML\AbstractFFI\MyCData;
use PHPML\Enum\CSFMLType;
use PHPML\Exception\CDataException;
use PHPML\Graphics\Drawable\AbstractDrawable;
use PHPML\Graphics\Texture;
use PHPML\Graphics\ExtendedWindow;
use PHPML\Library\GraphicsLibLoader as Lib;

/**
 * Class Shape
 * Classe de base pour la création de forme personnalisée
 *
 * @todo cette classe est en cours d'écriture et ne peut pas encore être utilisé
 * @package PHPML\Graphics\Drawable\Shape
 */
abstract class Shape extends AbstractDrawable
{
    public function __construct(
        callable $getPointCount,
        callable $getPoint,
        array $position = [0, 0],
        Color $fillColor = null,
        Texture $texture = null
    )
    {

        parent::__construct($position, $fillColor, $texture);
    }

    public function toCData(): CData
    {
        // TODO: Change the autogenerated stub
    }

    /**
     * Recalcule la géométrie interne de la forme
     * Cette méthode doit être appelé par les classes filles
     * à chaque fois qu'un point de la forme a été modifier
     */
    public function update(): void
    {
        Lib::getGraphicsLib()->sfShape_update($this->cdata);
    }

    final protected function getTypeName(): string
    {
        return CSFMLType::SHAPE;
    }

    /**
     * Renvoie le nombre de points de la forme
     *
     * @return int
     */
    abstract public function getPointCount(): int;

    /**
     * @param int $index
     * @return array
     */
    abstract public function getPoint(int $index): array;
}
